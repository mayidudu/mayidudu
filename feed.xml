<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-10-23T15:27:10+08:00</updated><id>/feed.xml</id><title type="html">蚂蚁都督</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="/jekyll/update/2018/10/23/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-10-23T10:12:48+08:00</published><updated>2018-10-23T10:12:48+08:00</updated><id>/jekyll/update/2018/10/23/welcome-to-jekyll</id><content type="html" xml:base="/jekyll/update/2018/10/23/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Logstash Import Json</title><link href="/2017/04/20/logstash-import-json.html" rel="alternate" type="text/html" title="Logstash Import Json" /><published>2017-04-20T00:00:00+08:00</published><updated>2017-04-20T00:00:00+08:00</updated><id>/2017/04/20/logstash-import-json</id><content type="html" xml:base="/2017/04/20/logstash-import-json.html">&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;input {
        file {
                type =&amp;gt; &quot;zmap&quot;
                path =&amp;gt; [&quot;/home/hadoop/rawdoc/ipv4json/*&quot;]
                codec =&amp;gt; &quot;json&quot;
                start_position =&amp;gt; &quot;beginning&quot;
                sincedb_path =&amp;gt; &quot;/dev/null&quot;
        }
}
output {
        elasticsearch {
                hosts =&amp;gt; [&quot;localhost:9200&quot;]
                index =&amp;gt; &quot;test3&quot;
                codec =&amp;gt; json
                template_overwrite =&amp;gt; true
        }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">``` input { file { type =&amp;gt; “zmap” path =&amp;gt; [“/home/hadoop/rawdoc/ipv4json/*”] codec =&amp;gt; “json” start_position =&amp;gt; “beginning” sincedb_path =&amp;gt; “/dev/null” } } output { elasticsearch { hosts =&amp;gt; [“localhost:9200”] index =&amp;gt; “test3” codec =&amp;gt; json template_overwrite =&amp;gt; true }</summary></entry><entry><title type="html">elasticsearch opera!</title><link href="/elasticsearch/2017/04/18/elasticsearch-opera.html" rel="alternate" type="text/html" title="elasticsearch opera!" /><published>2017-04-18T11:10:26+08:00</published><updated>2017-04-18T11:10:26+08:00</updated><id>/elasticsearch/2017/04/18/elasticsearch-opera</id><content type="html" xml:base="/elasticsearch/2017/04/18/elasticsearch-opera.html">&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;第一：_cat系列
_cat系列提供了一系列查询elasticsearch集群状态的接口。你可以通过执行
curl -XGET localhost:9200/_cat
获取所有_cat系列的操作
=^.^=
/_cat/allocation
/_cat/shards
/_cat/shards/{index}
/_cat/master
/_cat/nodes
/_cat/indices
/_cat/indices/{index}
/_cat/segments
/_cat/segments/{index}
/_cat/count
/_cat/count/{index}
/_cat/recovery
/_cat/recovery/{index}
/_cat/health
/_cat/pending_tasks
/_cat/aliases
/_cat/aliases/{alias}
/_cat/thread_pool
/_cat/plugins
/_cat/fielddata
/_cat/fielddata/{fields}
你也可以后面加一个v，让输出内容表格显示表头，举例

name       component        version type url
Prometheus analysis-mmseg   NA      j
Prometheus analysis-pinyin  NA      j
Prometheus analysis-ik      NA      j
Prometheus analysis-ik      NA      j
Prometheus analysis-smartcn 2.1.0   j
Prometheus segmentspy       NA      s    /_plugin/segmentspy/
Prometheus head             NA      s    /_plugin/head/
Prometheus bigdesk          NA      s    /_plugin/bigdesk/
Xandu      analysis-ik      NA      j
Xandu      analysis-pinyin  NA      j
Xandu      analysis-mmseg   NA      j
Xandu      analysis-smartcn 2.1.0   j
Xandu      head             NA      s    /_plugin/head/
Xandu      bigdesk          NA      s    /_plugin/bigdesk/
Onyxx      analysis-ik      NA      j
Onyxx      analysis-mmseg   NA      j
Onyxx      analysis-smartcn 2.1.0   j
Onyxx      analysis-pinyin  NA      j
Onyxx      head             NA      s    /_plugin/head/
Onyxx      bigdesk          NA      s    /_plugin/bigdesk/
第二：_cluster系列
1、查询设置集群状态
curl -XGET localhost:9200/_cluster/health?pretty=true
pretty=true表示格式化输出
level=indices 表示显示索引状态
level=shards 表示显示分片信息
2、curl -XGET localhost:9200/_cluster/stats?pretty=true
显示集群系统信息，包括CPU JVM等等
3、curl -XGET localhost:9200/_cluster/state?pretty=true
集群的详细信息。包括节点、分片等。
3、curl -XGET localhost:9200/_cluster/pending_tasks?pretty=true
获取集群堆积的任务
3、修改集群配置
举例：

curl -XPUT localhost:9200/_cluster/settings -d '{
    &quot;persistent&quot; : {
        &quot;discovery.zen.minimum_master_nodes&quot; : 2
    }
}'
transient 表示临时的，persistent表示永久的
4、curl -XPOST ‘localhost:9200/_cluster/reroute’ -d ‘xxxxxx’
对shard的手动控制，参考http://zhaoyanblog.com/archives/687.html
5、关闭节点
关闭指定192.168.1.1节点
curl -XPOST ‘http://192.168.1.1:9200/_cluster/nodes/_local/_shutdown’
curl -XPOST ‘http://localhost:9200/_cluster/nodes/192.168.1.1/_shutdown’
关闭主节点
curl -XPOST ‘http://localhost:9200/_cluster/nodes/_master/_shutdown’
关闭整个集群
$ curl -XPOST ‘http://localhost:9200/_shutdown?delay=10s’
$ curl -XPOST ‘http://localhost:9200/_cluster/nodes/_shutdown’
$ curl -XPOST ‘http://localhost:9200/_cluster/nodes/_all/_shutdown’
delay=10s表示延迟10秒关闭

第三：_nodes系列
1、查询节点的状态
curl -XGET ‘http://localhost:9200/_nodes/stats?pretty=true’
curl -XGET ‘http://localhost:9200/_nodes/192.168.1.2/stats?pretty=true’
curl -XGET ‘http://localhost:9200/_nodes/process’
curl -XGET ‘http://localhost:9200/_nodes/_all/process’
curl -XGET ‘http://localhost:9200/_nodes/192.168.1.2,192.168.1.3/jvm,process’
curl -XGET ‘http://localhost:9200/_nodes/192.168.1.2,192.168.1.3/info/jvm,process’
curl -XGET ‘http://localhost:9200/_nodes/192.168.1.2,192.168.1.3/_all
curl -XGET ‘http://localhost:9200/_nodes/hot_threads

第四：索引操作
1、获取索引
curl -XGET ‘http://localhost:9200/{index}/{type}/{id}’
2、索引数据
curl -XPOST ‘http://localhost:9200/{index}/{type}/{id}’ -d'{“a”:”avalue”,”b”:”bvalue”}’
3、删除索引
curl -XDELETE ‘http://localhost:9200/{index}/{type}/{id}’
4、设置mapping

curl -XPUT http://localhost:9200/{index}/{type}/_mapping -d '{
  &quot;{type}&quot; : {
	&quot;properties&quot; : {
	  &quot;date&quot; : {
		&quot;type&quot; : &quot;long&quot;
	  },
	  &quot;name&quot; : {
		&quot;type&quot; : &quot;string&quot;,
		&quot;index&quot; : &quot;not_analyzed&quot;
	  },
	  &quot;status&quot; : {
		&quot;type&quot; : &quot;integer&quot;
	  },
	  &quot;type&quot; : {
		&quot;type&quot; : &quot;integer&quot;
	  }
	}
  }
}'
5、获取mapping
curl -XGET http://localhost:9200/{index}/{type}/_mapping
6、搜索

curl -XGET 'http://localhost:9200/{index}/{type}/_search' -d '{
    &quot;query&quot; : {
        &quot;term&quot; : { &quot;user&quot; : &quot;kimchy&quot; } //查所有 &quot;match_all&quot;: {}
    },
	&quot;sort&quot; : [{ &quot;age&quot; : {&quot;order&quot; : &quot;asc&quot;}},{ &quot;name&quot; : &quot;desc&quot; } ],
	&quot;from&quot;:0,
	&quot;size&quot;:100
}
curl -XGET 'http://localhost:9200/{index}/{type}/_search' -d '{
    &quot;filter&quot;: {&quot;and&quot;:{&quot;filters&quot;:[{&quot;term&quot;:{&quot;age&quot;:&quot;123&quot;}},{&quot;term&quot;:{&quot;name&quot;:&quot;张三&quot;}}]},
	&quot;sort&quot; : [{ &quot;age&quot; : {&quot;order&quot; : &quot;asc&quot;}},{ &quot;name&quot; : &quot;desc&quot; } ],
	&quot;from&quot;:0,
	&quot;size&quot;:100
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">``` 第一：_cat系列 _cat系列提供了一系列查询elasticsearch集群状态的接口。你可以通过执行 curl -XGET localhost:9200/_cat 获取所有_cat系列的操作 =^.^= /_cat/allocation /_cat/shards /_cat/shards/{index} /_cat/master /_cat/nodes /_cat/indices /_cat/indices/{index} /_cat/segments /_cat/segments/{index} /_cat/count /_cat/count/{index} /_cat/recovery /_cat/recovery/{index} /_cat/health /_cat/pending_tasks /_cat/aliases /_cat/aliases/{alias} /_cat/thread_pool /_cat/plugins /_cat/fielddata /_cat/fielddata/{fields} 你也可以后面加一个v，让输出内容表格显示表头，举例</summary></entry><entry><title type="html">Hbase filter!</title><link href="/hbase/2017/04/17/hbase-filter.html" rel="alternate" type="text/html" title="Hbase filter!" /><published>2017-04-17T15:29:26+08:00</published><updated>2017-04-17T15:29:26+08:00</updated><id>/hbase/2017/04/17/hbase-filter</id><content type="html" xml:base="/hbase/2017/04/17/hbase-filter.html">&lt;p&gt;hbase filter用法&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scan 'shegong', {FILTER =&amp;gt; RowFilter.new(CompareFilter::CompareOp.valueOf('EQUAL'), SubstringComparator.new('ts3'))}
前缀查询
scan 'zmtest1', FILTER =&amp;gt; &quot;PrefixFilter('user1')&quot;   
后缀查询
scan 'shegong', {FILTER =&amp;gt; RowFilter.new(CompareFilter::CompareOp.valueOf('EQUAL'),RegexStringComparator.new('taobao$')), LIMIT=&amp;gt;5}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">hbase filter用法 scan 'shegong', {FILTER =&amp;gt; RowFilter.new(CompareFilter::CompareOp.valueOf('EQUAL'), SubstringComparator.new('ts3'))} 前缀查询 scan 'zmtest1', FILTER =&amp;gt; &quot;PrefixFilter('user1')&quot;    后缀查询 scan 'shegong', {FILTER =&amp;gt; RowFilter.new(CompareFilter::CompareOp.valueOf('EQUAL'),RegexStringComparator.new('taobao$')), LIMIT=&amp;gt;5}</summary></entry><entry><title type="html">Jekyll deploy problem!</title><link href="/ruby/2017/04/17/jekyll-problem.html" rel="alternate" type="text/html" title="Jekyll deploy problem!" /><published>2017-04-17T06:29:26+08:00</published><updated>2017-04-17T06:29:26+08:00</updated><id>/ruby/2017/04/17/jekyll-problem</id><content type="html" xml:base="/ruby/2017/04/17/jekyll-problem.html">&lt;p&gt;in mac sierra, ruby version is 2.0.0, so it has problem when start jekyll
use rvm to manage ruby version&lt;/p&gt;

&lt;p&gt;check Gemfile.lock&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;curl -L get.rvm.io&lt;/td&gt;
      &lt;td&gt;bash -s stable&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;source ~/.bashrc
source ~/.bash_profile&lt;/p&gt;

&lt;p&gt;ruby -v&lt;/p&gt;

&lt;p&gt;rvm list known&lt;/p&gt;

&lt;p&gt;rvm install 2.3.3&lt;/p&gt;

&lt;p&gt;Bundler 会连接rubygems.org（或者其他你声明的源），然后列出所有你指定的符合你需要的 gem。因为所有你在Gemfile里的依赖有它们自己的依赖，所以基于上面的Gemfile运行bundle install会安装相当多的的 gem。&lt;/p&gt;

&lt;p&gt;bundle install&lt;/p&gt;

&lt;p&gt;bundle exec jekyll serve&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll 采用ruby来构建，因此需要了解一下ruby的基本概念和工具。
RVM
用于帮你安装Ruby环境，帮你管理多个Ruby环境，帮你管理你开发的每个Ruby应用使用机器上哪个Ruby环境。Ruby环境不仅仅是Ruby本身，还包括依赖的第三方Ruby插件。都由RVM管理。
Rails
这个也不用多说，著名开发框架。详细看 http://zh.wikipedia.org/wiki/Ruby_on_Rails
RubyGems
RubyGems是一个方便而强大的Ruby程序包管理器（ package manager），类似RedHat的RPM.它将一个Ruby应用程序打包到一个gem里，作为一个安装单元。无需安装，最新的Ruby版本已经包含RubyGems了。
Gem
Gem是封装起来的Ruby应用程序或代码库。
注：在终端使用的gem命令，是指通过RubyGems管理Gem包。
Gemfile
定义你的应用依赖哪些第三方包，bundle根据该配置去寻找这些包。
Rake
Rake是所有需要安装的Gem中最重要的一个，并且它应该始终是你在系统上第一个安装的Gem。Rake是一个构建工具，和Make很相似，但它允许用Ruby来写Rakefile（如何进行构建的定义文件），其中使用了一种特定的DSL（domain-specific language，领域专用语言），在保持Ruby强大功能的同时提供很高的可读性。 Rails用rake扩展来完成多种不容任务，如数据库初始化、更新等。
Rake is a build language, similar in purpose to make and ant. Like make and ant it's a Domain Specific Language, unlike those two it's an internal DSL programmed in the Ruby language.
PS：个人感觉有点类似Symfony2中的app/console
详细 http://rake.rubyforge.org/
Rakefile
Rakefile是由Ruby编写，Rake的命令执行就是由Rakefile文件定义。
In a gem's context, the Rakefile is extremely useful. It can hold various tasks to help building, testing and debugging your gem, among all other things that you might find useful.
详细： http://rake.rubyforge.org/files/doc/rakefile_rdoc.html
Bundle
相当于多个RubyGems批处理运行。在配置文件gemfilel里说明你的应用依赖哪些第三方包，他自动帮你下载安装多个包，并且会下载这些包依赖的包。
Bundler maintains a consistent environment for ruby applications. It tracks an application's code and the rubygems it needs to run, so that an application will always have the exact gems (and versions) that it needs to run.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">in mac sierra, ruby version is 2.0.0, so it has problem when start jekyll use rvm to manage ruby version</summary></entry><entry><title type="html">hbase bulk load</title><link href="/code/2017/04/08/hbase-bulkload.html" rel="alternate" type="text/html" title="hbase bulk load" /><published>2017-04-08T16:31:26+08:00</published><updated>2017-04-08T16:31:26+08:00</updated><id>/code/2017/04/08/hbase-bulkload</id><content type="html" xml:base="/code/2017/04/08/hbase-bulkload.html"></content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">awk处理windows编码文件时最后一个字段的问题</title><link href="/code/2017/04/06/gawk-windows-code.html" rel="alternate" type="text/html" title="awk处理windows编码文件时最后一个字段的问题" /><published>2017-04-06T16:31:26+08:00</published><updated>2017-04-06T16:31:26+08:00</updated><id>/code/2017/04/06/gawk-windows-code</id><content type="html" xml:base="/code/2017/04/06/gawk-windows-code.html">&lt;p&gt;采用awk来处理文本文件，希望对其中的字段进行重新组合，以便于后续的处理。但是采用&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;awk -F'#' '{ print $1,$2,$3}’时正确显示
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;而换成&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;awk -F'#' '{ print $3,$2,$1}'时无法显示最后一个字段
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在查阅了awk的语法后没有发现任何问题。
后来定位到是文件本身的问题。
也就是说我处理的文件的编码问题，该文件在windows上被打开编辑过，所以它的回车换行是windows的，必须转换成linux的，
^M就是元凶，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2:0xFD3515E21CA80E761EB9AD5D793BDB9F0D8F030F2DB39FD1200A7E^M$
2:0xFD3515E21CA80E761EB9AD5D793BDB9F0D8F030F2DB39FD1200A7E^M$
2:0xFD3515E21CA80E761EB9AD5D793BDB9F0D8F030F2DB39FD1200A7E^M$
2:0xFD3515E21CA80E761EB9AD5D793BDB9F0D8F030F2DB39FD1200A7E^M$
3:0xFdd515E21CA80E761EB9AD5D793BDB9F0D8F030F2DB39FD1200A7E^M$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;转换的方法是
cat source.txt | tr -d “^M” &amp;gt; source2.txt
^M在shell中的输入方式为ctrl + v,然后松开v按m即可，&lt;/p&gt;</content><author><name></name></author><summary type="html">采用awk来处理文本文件，希望对其中的字段进行重新组合，以便于后续的处理。但是采用 awk -F'#' '{ print $1,$2,$3}’时正确显示 而换成 awk -F'#' '{ print $3,$2,$1}'时无法显示最后一个字段 在查阅了awk的语法后没有发现任何问题。 后来定位到是文件本身的问题。 也就是说我处理的文件的编码问题，该文件在windows上被打开编辑过，所以它的回车换行是windows的，必须转换成linux的， ^M就是元凶， 2:0xFD3515E21CA80E761EB9AD5D793BDB9F0D8F030F2DB39FD1200A7E^M$ 2:0xFD3515E21CA80E761EB9AD5D793BDB9F0D8F030F2DB39FD1200A7E^M$ 2:0xFD3515E21CA80E761EB9AD5D793BDB9F0D8F030F2DB39FD1200A7E^M$ 2:0xFD3515E21CA80E761EB9AD5D793BDB9F0D8F030F2DB39FD1200A7E^M$ 3:0xFdd515E21CA80E761EB9AD5D793BDB9F0D8F030F2DB39FD1200A7E^M$ 转换的方法是 cat source.txt | tr -d “^M” &amp;gt; source2.txt ^M在shell中的输入方式为ctrl + v,然后松开v按m即可，</summary></entry><entry><title type="html">bash与sh的区别</title><link href="/jekyll/update/2017/04/05/diff-sh-bash.html" rel="alternate" type="text/html" title="bash与sh的区别" /><published>2017-04-05T15:14:26+08:00</published><updated>2017-04-05T15:14:26+08:00</updated><id>/jekyll/update/2017/04/05/diff-sh-bash</id><content type="html" xml:base="/jekyll/update/2017/04/05/diff-sh-bash.html">&lt;p&gt;对于脚本文件split_str.sh&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello,world,i,like,you,babalala&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;//,/ &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[@]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;sh split_str.sh运行时会出现Bad substitution的错误，而改成bash split_str.sh时没有问题。&lt;/p&gt;

&lt;p&gt;于是顺手查了下 /bin/sh 与 /bin/bash 的区别，用 : 截取字符串不是POSIX 标准的。
区别
sh 一般设成 bash 的软链 (symlink)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -l /bin/sh  
lrwxrwxrwx 1 root root 4 Sep 14 04:45 /bin/sh -&amp;gt; dash  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在一般的 linux 系统当中（例外如 FreeBSD,OpenBSD 等），使用 sh 调用执行脚本相当于打开了bash 的 POSIX 标准模式
也就是说 /bin/sh 相当于 /bin/bash –posix
所以，它们之间的各种差异都是来自 POSIX 标准模式 和 bash 的差异，比如 用 : 截取字符串，不能用 let ， 遇错中断 等等，在使用时需要注意。&lt;/p&gt;</content><author><name></name></author><summary type="html">对于脚本文件split_str.sh #!/bin/bash str=&quot;hello,world,i,like,you,babalala&quot; arr=(${str//,/ }) for i in ${arr[@]} do echo $i done sh split_str.sh运行时会出现Bad substitution的错误，而改成bash split_str.sh时没有问题。</summary></entry><entry><title type="html">First blog with github</title><link href="/jekyll/update/2017/04/05/first-blog.html" rel="alternate" type="text/html" title="First blog with github" /><published>2017-04-05T09:59:26+08:00</published><updated>2017-04-05T09:59:26+08:00</updated><id>/jekyll/update/2017/04/05/first-blog</id><content type="html" xml:base="/jekyll/update/2017/04/05/first-blog.html">&lt;p&gt;作为一个IT工程师，居然这么晚才开始加入到主流的工作方式，着实有些惭愧，以前一直以自己在体制内作为借口，认为写blog是xm行为，现在想想这只不过是自己拿来骗自己的一个光面堂皇的理由，为自己的懒惰找到一个正当的说辞。&lt;/p&gt;

&lt;p&gt;以后要多督促自己。&lt;/p&gt;</content><author><name></name></author><summary type="html">作为一个IT工程师，居然这么晚才开始加入到主流的工作方式，着实有些惭愧，以前一直以自己在体制内作为借口，认为写blog是xm行为，现在想想这只不过是自己拿来骗自己的一个光面堂皇的理由，为自己的懒惰找到一个正当的说辞。</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="/jekyll/update/2017/04/05/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-04-05T09:29:26+08:00</published><updated>2017-04-05T09:29:26+08:00</updated><id>/jekyll/update/2017/04/05/welcome-to-jekyll</id><content type="html" xml:base="/jekyll/update/2017/04/05/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>